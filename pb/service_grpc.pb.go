// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookRentalService_RegisterUser_FullMethodName     = "/bookrental.BookRentalService/RegisterUser"
	BookRentalService_LoginUser_FullMethodName        = "/bookrental.BookRentalService/LoginUser"
	BookRentalService_AddBook_FullMethodName          = "/bookrental.BookRentalService/AddBook"
	BookRentalService_RemoveBook_FullMethodName       = "/bookrental.BookRentalService/RemoveBook"
	BookRentalService_BorrowBook_FullMethodName       = "/bookrental.BookRentalService/BorrowBook"
	BookRentalService_ReturnBook_FullMethodName       = "/bookrental.BookRentalService/ReturnBook"
	BookRentalService_GetBooks_FullMethodName         = "/bookrental.BookRentalService/GetBooks"
	BookRentalService_GetBorrowedBooks_FullMethodName = "/bookrental.BookRentalService/GetBorrowedBooks"
)

// BookRentalServiceClient is the client API for BookRentalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the gRPC service
type BookRentalServiceClient interface {
	// User-related operations
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	// Book-related operations
	AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	RemoveBook(ctx context.Context, in *RemoveBookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	BorrowBook(ctx context.Context, in *BorrowBookRequest, opts ...grpc.CallOption) (*BorrowBookResponse, error)
	ReturnBook(ctx context.Context, in *ReturnBookRequest, opts ...grpc.CallOption) (*ReturnBookResponse, error)
	GetBooks(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*GetBooksResponse, error)
	// Borrow-related operations
	GetBorrowedBooks(ctx context.Context, in *GetBorrowedBooksRequest, opts ...grpc.CallOption) (*GetBorrowedBooksResponse, error)
}

type bookRentalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookRentalServiceClient(cc grpc.ClientConnInterface) BookRentalServiceClient {
	return &bookRentalServiceClient{cc}
}

func (c *bookRentalServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, BookRentalService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookRentalServiceClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, BookRentalService_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookRentalServiceClient) AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookRentalService_AddBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookRentalServiceClient) RemoveBook(ctx context.Context, in *RemoveBookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookRentalService_RemoveBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookRentalServiceClient) BorrowBook(ctx context.Context, in *BorrowBookRequest, opts ...grpc.CallOption) (*BorrowBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowBookResponse)
	err := c.cc.Invoke(ctx, BookRentalService_BorrowBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookRentalServiceClient) ReturnBook(ctx context.Context, in *ReturnBookRequest, opts ...grpc.CallOption) (*ReturnBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnBookResponse)
	err := c.cc.Invoke(ctx, BookRentalService_ReturnBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookRentalServiceClient) GetBooks(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*GetBooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBooksResponse)
	err := c.cc.Invoke(ctx, BookRentalService_GetBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookRentalServiceClient) GetBorrowedBooks(ctx context.Context, in *GetBorrowedBooksRequest, opts ...grpc.CallOption) (*GetBorrowedBooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBorrowedBooksResponse)
	err := c.cc.Invoke(ctx, BookRentalService_GetBorrowedBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookRentalServiceServer is the server API for BookRentalService service.
// All implementations must embed UnimplementedBookRentalServiceServer
// for forward compatibility.
//
// Define the gRPC service
type BookRentalServiceServer interface {
	// User-related operations
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	// Book-related operations
	AddBook(context.Context, *AddBookRequest) (*BookResponse, error)
	RemoveBook(context.Context, *RemoveBookRequest) (*BookResponse, error)
	BorrowBook(context.Context, *BorrowBookRequest) (*BorrowBookResponse, error)
	ReturnBook(context.Context, *ReturnBookRequest) (*ReturnBookResponse, error)
	GetBooks(context.Context, *GetBooksRequest) (*GetBooksResponse, error)
	// Borrow-related operations
	GetBorrowedBooks(context.Context, *GetBorrowedBooksRequest) (*GetBorrowedBooksResponse, error)
	mustEmbedUnimplementedBookRentalServiceServer()
}

// UnimplementedBookRentalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookRentalServiceServer struct{}

func (UnimplementedBookRentalServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedBookRentalServiceServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedBookRentalServiceServer) AddBook(context.Context, *AddBookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedBookRentalServiceServer) RemoveBook(context.Context, *RemoveBookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBook not implemented")
}
func (UnimplementedBookRentalServiceServer) BorrowBook(context.Context, *BorrowBookRequest) (*BorrowBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrowBook not implemented")
}
func (UnimplementedBookRentalServiceServer) ReturnBook(context.Context, *ReturnBookRequest) (*ReturnBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnBook not implemented")
}
func (UnimplementedBookRentalServiceServer) GetBooks(context.Context, *GetBooksRequest) (*GetBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedBookRentalServiceServer) GetBorrowedBooks(context.Context, *GetBorrowedBooksRequest) (*GetBorrowedBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowedBooks not implemented")
}
func (UnimplementedBookRentalServiceServer) mustEmbedUnimplementedBookRentalServiceServer() {}
func (UnimplementedBookRentalServiceServer) testEmbeddedByValue()                           {}

// UnsafeBookRentalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookRentalServiceServer will
// result in compilation errors.
type UnsafeBookRentalServiceServer interface {
	mustEmbedUnimplementedBookRentalServiceServer()
}

func RegisterBookRentalServiceServer(s grpc.ServiceRegistrar, srv BookRentalServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookRentalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookRentalService_ServiceDesc, srv)
}

func _BookRentalService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookRentalServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookRentalService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookRentalServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookRentalService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookRentalServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookRentalService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookRentalServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookRentalService_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookRentalServiceServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookRentalService_AddBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookRentalServiceServer).AddBook(ctx, req.(*AddBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookRentalService_RemoveBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookRentalServiceServer).RemoveBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookRentalService_RemoveBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookRentalServiceServer).RemoveBook(ctx, req.(*RemoveBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookRentalService_BorrowBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookRentalServiceServer).BorrowBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookRentalService_BorrowBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookRentalServiceServer).BorrowBook(ctx, req.(*BorrowBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookRentalService_ReturnBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookRentalServiceServer).ReturnBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookRentalService_ReturnBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookRentalServiceServer).ReturnBook(ctx, req.(*ReturnBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookRentalService_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookRentalServiceServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookRentalService_GetBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookRentalServiceServer).GetBooks(ctx, req.(*GetBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookRentalService_GetBorrowedBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBorrowedBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookRentalServiceServer).GetBorrowedBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookRentalService_GetBorrowedBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookRentalServiceServer).GetBorrowedBooks(ctx, req.(*GetBorrowedBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookRentalService_ServiceDesc is the grpc.ServiceDesc for BookRentalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookRentalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookrental.BookRentalService",
	HandlerType: (*BookRentalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _BookRentalService_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _BookRentalService_LoginUser_Handler,
		},
		{
			MethodName: "AddBook",
			Handler:    _BookRentalService_AddBook_Handler,
		},
		{
			MethodName: "RemoveBook",
			Handler:    _BookRentalService_RemoveBook_Handler,
		},
		{
			MethodName: "BorrowBook",
			Handler:    _BookRentalService_BorrowBook_Handler,
		},
		{
			MethodName: "ReturnBook",
			Handler:    _BookRentalService_ReturnBook_Handler,
		},
		{
			MethodName: "GetBooks",
			Handler:    _BookRentalService_GetBooks_Handler,
		},
		{
			MethodName: "GetBorrowedBooks",
			Handler:    _BookRentalService_GetBorrowedBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
